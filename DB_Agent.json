{
  "name": "DB_Agent",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "text"
            },
            {
              "name": "sessionId"
            },
            {
              "name": "organizationId",
              "type": "number"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        0,
        0
      ],
      "id": "75b1e982-e98b-4a30-b5e9-cf775866e7e7",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "model": "google/gemini-2.0-flash-001",
        "options": {
          "maxRetries": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        200,
        -200
      ],
      "id": "ef9351d7-bc30-47ce-8509-dcbe17f3c1c0",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "mvQpgkZtqsNRA84u",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemMessage": "Role:\nYou are DB Agent, responsible for executing inventory changes in a PostgreSQL database. You receive an approved proposal and convert it into precise database operations.\nTask:\n Extract product names exactly as written between double quotes (\"\"). Do not modify, change, or infer any product names.\n Analyze the proposal:  \nIf it’s a stock or attribute change: Use Select_By_Name to check if the product exists.  \nIf it exists → Use Update.  \n\nIf it doesn’t exist → Use Insert.\n\nIf it’s a rename proposal (e.g., \"Renombrar producto 'x' a 'y'\"):  \nUse Select_By_Name with the old name (\"x\") to find the product.  \n\nIf it exists → Use Update to change the name to the new name (\"y\").  \n\nIf it doesn’t exist → Report that the product wasn’t found.\n\nIf it’s a delete proposal (e.g., \"Eliminar producto 'x'\"):  \nUse Select_By_Name with the product name (\"x\") to find the product.  \n\nIf it exists → Use Delete with the product’s id to remove it.  \n\nIf it doesn’t exist → Report that the product wasn’t found.\n Ensure the operation was successful before confirming it.\n\nTools:\n Select_By_Name → Retrieve product attributes.  \nInput: \"name\" (full product name as provided).  \n\nOutput: Product information, including id, if found.\n Update → Modify an existing product.  \n\nInput: Product attributes to change (e.g., name, quantity).\n Insert → Add a new product if it doesn’t exist.  \n\nInput: Product attributes (e.g., name, quantity).\n Delete → Remove an existing product.  \n\nInput: Product id.\n\nResponse Format:\n Stock updated: \"Sprite\" → 10 units.\n Added \"Coca-Cola\" (12 units).\n Price changed: \"iPhone\" → $999.99.\n Renamed: \"Old Name\" → \"New Name\".\n Deleted: \"Product Name\".\n Product \"Name\" not found for renaming.\n Product \"Name\" not found for deletion.\nSTRICT RULES (DO NOT BREAK ):\n DO NOT invent or assume product names, quantities, or changes that were not explicitly requested.\n DO NOT modify the product name unless explicitly requested in a rename proposal. Use it exactly as written between double quotes (\"\").\n DO NOT add, remove, or alter information beyond what is explicitly stated in the approved proposal.\n Only confirm changes that were successfully executed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        220,
        0
      ],
      "id": "d1c084a1-ce77-41ff-8911-23efe4dc3f48",
      "name": "Nullius AI DB Agent"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "products",
          "mode": "list",
          "cachedResultName": "products"
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "where": {
          "values": [
            {
              "column": "name",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Value', ``, 'string') }}"
            },
            {
              "column": "organization_id",
              "value": "={{ $json.organizationId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        160,
        320
      ],
      "id": "c4f97715-f399-4fb2-aa21-abafd43078d2",
      "name": "Select_By_Name",
      "credentials": {
        "postgres": {
          "id": "dnO3p7Dq5udUQp1l",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "products",
          "mode": "list",
          "cachedResultName": "products"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('name', ``, 'string') }}",
            "price": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('price', ``, 'number') }}",
            "stock": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('stock', ``, 'number') }}",
            "organization_id": "={{ $json.organizationId }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "name",
              "displayName": "name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "price",
              "displayName": "price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "stock",
              "displayName": "stock",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "organization_id",
              "displayName": "organization_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        340,
        320
      ],
      "id": "4aabf474-1cdd-4fcf-aa89-28b0ffc2a83f",
      "name": "Insert",
      "credentials": {
        "postgres": {
          "id": "dnO3p7Dq5udUQp1l",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "products",
          "mode": "list",
          "cachedResultName": "products"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "price": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('price', ``, 'number') }}",
            "stock": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('stock', ``, 'number') }}",
            "id": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('id__using_to_match_', ``, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('name', ``, 'string') }}",
            "organization_id": "={{ $json.organizationId }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "name",
              "displayName": "name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "price",
              "displayName": "price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "stock",
              "displayName": "stock",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "organization_id",
              "displayName": "organization_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        500,
        320
      ],
      "id": "c25581d3-3ede-4783-9395-04b4690d2b3b",
      "name": "Update",
      "credentials": {
        "postgres": {
          "id": "dnO3p7Dq5udUQp1l",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "tableName": "chat_histories",
        "contextWindowLength": 1
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        360,
        -200
      ],
      "id": "ff2ae86e-15d4-4410-b2a4-4dbcc6a89824",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "dnO3p7Dq5udUQp1l",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "products",
          "mode": "list",
          "cachedResultName": "products"
        },
        "deleteCommand": "delete",
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Value', ``, 'string') }}"
            },
            {
              "column": "organization_id",
              "value": "={{ $json.organizationId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        660,
        320
      ],
      "id": "869e894c-c7e5-4d18-84a2-83b8723c0b56",
      "name": "Delete",
      "credentials": {
        "postgres": {
          "id": "dnO3p7Dq5udUQp1l",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Nullius AI DB Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Nullius AI DB Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Nullius AI DB Agent": {
      "main": [
        []
      ]
    },
    "Select_By_Name": {
      "ai_tool": [
        [
          {
            "node": "Nullius AI DB Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Insert": {
      "ai_tool": [
        [
          {
            "node": "Nullius AI DB Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update": {
      "ai_tool": [
        [
          {
            "node": "Nullius AI DB Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Nullius AI DB Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Delete": {
      "ai_tool": [
        [
          {
            "node": "Nullius AI DB Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c0faf57b-7942-401f-a4e1-dbc59dc82352",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "86d6130756d46403661eb733f8fe5c2e3923b9c440015366aa3cd74b76f57c5a"
  },
  "id": "C1bf6htNpoReCQMU",
  "tags": []
}