{
  "name": "DB_Agent",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "text"
            },
            {
              "name": "sessionId"
            },
            {
              "name": "organizationId",
              "type": "number"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -200,
        200
      ],
      "id": "c5394032-e82c-4586-b482-6d6674ef9964",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "model": "google/gemini-2.0-flash-001",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "5782bcbe-0ed1-429f-9568-b7466ac7f56e",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "DJ99P62ExqPaQhky",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemMessage": "=Role:\nYou are DB Agent, tasked with executing inventory changes in a PostgreSQL database based on an approved proposal.\nTask:  \nExtract Unique Product Names:  \nIdentify all product names exactly as written between double quotes (\"\") in the proposal.  \n\nBuild a list of unique product names, ensuring each name appears only once regardless of repetition in the proposal.\n\nProcess Each Product:  \nFor each unique product name in the list, perform the following exactly once:\na. Search: Use Select_By_Name with the exact name as provided.\nb. Act Based on Proposal:  \nStock or Attribute Change:  \nIf product exists (returns info), use Update.  \n\nIf product does not exist (no results), use Insert.\n\nRename (\"Rename product 'X' to 'Y'\"):  \nIf \"X\" exists, use Update to rename to \"Y\".  \n\nIf \"X\" does not exist, report: \"Product 'X' not found for renaming.\"\n\nDelete (\"Delete product 'X'\"):  \nIf \"X\" exists, use Delete with the product ID.  \n\nIf \"X\" does not exist, report: \"Product 'X' not found for deletion.\"\nc. Record Success: Only confirm operations that succeed.\n\nOutput and Terminate:  \nAfter processing all unique product names exactly once, generate the response in the specified format.  \n\nIf no changes were made, return the \"no changes\" message.  \n\nStop execution immediately after outputting the response.\n\nTools:  \nSelect_By_Name:  \nInput: \"name\": \"<exact product name between quotes>\"  \n\nOutput: Product info if found, no results if not.  \n\nSearches exact name with organization_id included.\n\nUpdate: Modify an existing product (e.g., name, stock, price).  \n\nInsert: Add a new product (e.g., name, stock, price).  \n\nDelete: Remove a product by ID.\n\nResponse Format:  \nStock updated: \"Product Name\" → X units.  \n\nAdded \"Product Name\" (X units).  \n\nPrice changed: \"Product Name\" → $X.XX.  \n\nRenamed: \"Old Name\" → \"New Name\".  \n\nDeleted: \"Product Name\".  \n\nProduct \"Name\" not found for renaming.  \n\nProduct \"Name\" not found for deletion.  \n\nNo changes:  \n\nNo changes were made. I’m here when you need me! Feel free to send text or audio messages to register your products!\n\nStrict Rules:  \nUse product names exactly as provided in quotes (\"\").  \n\nProcess each unique name only once—no repeated searches or operations.  \n\nDo not invent or assume data not in the proposal.  \n\nConfirm only successful changes.  \n\nTerminate immediately after generating the response."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        20,
        200
      ],
      "id": "f7022393-75b0-4c46-836d-02b337adc09e",
      "name": "Nullius AI DB Agent"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "products",
          "mode": "list",
          "cachedResultName": "products"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('name', ``, 'string') }}",
            "price": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('price', ``, 'number') }}",
            "stock": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('stock', ``, 'number') }}",
            "organization_id": "={{ $json.organizationId }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "name",
              "displayName": "name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "price",
              "displayName": "price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "stock",
              "displayName": "stock",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "organization_id",
              "displayName": "organization_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        140,
        520
      ],
      "id": "f3096045-0768-4149-bb78-6f157edb2129",
      "name": "Insert",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "products",
          "mode": "list",
          "cachedResultName": "products"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "price": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('price', ``, 'number') }}",
            "stock": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('stock', ``, 'number') }}",
            "id": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('id__using_to_match_', ``, 'number') }}",
            "name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('name', ``, 'string') }}",
            "organization_id": "={{ $json.organizationId }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "name",
              "displayName": "name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "price",
              "displayName": "price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "stock",
              "displayName": "stock",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "updated_at",
              "displayName": "updated_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "organization_id",
              "displayName": "organization_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        300,
        520
      ],
      "id": "0e8a1324-1c77-4633-a274-c93545d44eef",
      "name": "Update",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "tableName": "chat_histories",
        "contextWindowLength": 1
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        160,
        0
      ],
      "id": "bc84947e-84f0-47d1-9713-d916f613ddab",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteTable",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "products",
          "mode": "list",
          "cachedResultName": "products"
        },
        "deleteCommand": "delete",
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Value', ``, 'string') }}"
            },
            {
              "column": "organization_id",
              "value": "={{ $json.organizationId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        460,
        520
      ],
      "id": "6891b728-503f-4756-acdb-fc80983b3f7b",
      "name": "Delete",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "products",
          "mode": "list",
          "cachedResultName": "products"
        },
        "where": {
          "values": [
            {
              "column": "name",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Value', ``, 'string') }}"
            },
            {
              "column": "organization_id",
              "value": "={{ $json.organizationId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -40,
        520
      ],
      "id": "9244b6da-70c9-4feb-afe6-281c7c2d248d",
      "name": "Select_By_Name",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "text": "¡Claro, aquí tienes!\n\nPropuesta:  \nAjustar \"caja de papas fritas de 20kg\" aumentar el stock en 50 unidades.  \nAjustar \"Coca Cola de 3l\" aumentar el stock en 50 unidades.  \nAjustar \"vino toro\" aumentar el stock en 50 unidades.  \nAjustar \"barra de chocolate Felfort\" aumentar el stock en 50 unidades.  \nAjustar \"leche la serenisima\" aumentar el stock en 50 unidades.  \nAjustar \"alfajores Fulbito\" aumentar el stock en 50 unidades.  \n¿Confirma este cambio?",
          "sessionId": "2066318640",
          "organizationId": 5
        }
      }
    ]
  },
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Nullius AI DB Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Nullius AI DB Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Insert": {
      "ai_tool": [
        [
          {
            "node": "Nullius AI DB Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update": {
      "ai_tool": [
        [
          {
            "node": "Nullius AI DB Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Nullius AI DB Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Delete": {
      "ai_tool": [
        [
          {
            "node": "Nullius AI DB Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Select_By_Name": {
      "ai_tool": [
        [
          {
            "node": "Nullius AI DB Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "32acb6ff-87cf-48e1-bb15-4b15f657a264",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "807311775c7585ed35e884f85091e51bb5aa58467a63a991e483dc935acd5061"
  },
  "id": "ouyeurbVKyanYg7L",
  "tags": []
}