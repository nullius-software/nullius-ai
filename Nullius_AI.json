{
  "name": "Nullius_AI",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -4380,
        400
      ],
      "id": "dd021967-3c43-458c-b3ac-fcb1de0002b2",
      "name": "Telegram Trigger",
      "webhookId": "38469200-ea17-4126-95ac-6c18bb1b5bf9",
      "credentials": {
        "telegramApi": {
          "id": "Sw0Z1auJMZBifYiI",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {
          "language": "es"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -1540,
        240
      ],
      "id": "abab9a01-b4a7-412f-b5b6-a55e28c40582",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "5k0YEttcZ9xDlfHA",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Telegram Trigger').first().json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "7e63b0a0-35aa-497a-b71c-7f26e3be7457"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8686a3a8-155e-430c-8e08-632f318919f9",
                    "leftValue": "={{ $('Telegram Trigger').first().json.message.voice }}",
                    "rightValue": "",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1260,
        400
      ],
      "id": "ab1b6617-a970-400d-9a4f-7ccd21145488",
      "name": "Switch"
    },
    {
      "parameters": {
        "model": "google/gemini-2.0-flash-001",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -400,
        800
      ],
      "id": "1f68a5bd-f364-40a5-be5a-01f3931d656f",
      "name": "Gemini-2.0",
      "credentials": {
        "openRouterApi": {
          "id": "DJ99P62ExqPaQhky",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "GUOKOaaTUhaTaCCr",
          "mode": "list",
          "cachedResultName": "Inventory_Planner_Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "text": "={{ $('Message').first().json.text }}",
            "sessionId": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
            "organizationId": "={{ $('Find Telegram ID').first().json.organization_id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "text",
              "displayName": "text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "sessionId",
              "displayName": "sessionId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "organizationId",
              "displayName": "organizationId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            }
          ],
          "attemptToConvertTypes": true,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        0,
        400
      ],
      "id": "4578d77e-99a3-4675-9542-4cee5868e76b",
      "name": "Inventory Planner Agent"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "1DRRsXUpqpJCNqQD",
          "mode": "list",
          "cachedResultName": "Parse_Response_Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "text": "={{ $json.output }}",
            "sessionId": "={{ $('Telegram Trigger').first().json.message.chat.id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "text",
              "displayName": "text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "sessionId",
              "displayName": "sessionId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": true,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        240,
        400
      ],
      "id": "19c74067-eba1-4acb-8c9b-979f731a7315",
      "name": "Parse Response Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Message').first().json.text }}",
        "options": {
          "systemMessage": "=Role:\nYou are a friendly assistant for non-inventory inputs.\nInstructions:  \nRespond with a short, polite intro (1 sentence) addressing the user's message.  \n\nIf the user says \"no\" or explicitly states they do not want to make changes (e.g., \"no quiero hacer cambios\"), respond with: \"Got it, I’ll leave it at that! I’m here when you need me! . Feel free to send text or audio messages to register your products!\"  \n\nFor all other non-inventory inputs, add: \"I’m here to help manage your inventory. Feel free to send text or audio messages to register your products!\"  \n\nKeep it under 3 sentences, no extra details.  \n\nDo not suggest inventory changes or call tools.\n\nExamples:  \nInput: \"What's the weather?\"  \nOutput: \"Not sure about the weather! I’m here to help manage your inventory. Feel free to send text or audio messages to register your products!\"\n\nInput: \"No quiero hacer cambios.\"  \nOutput: \"Got it, I’ll leave it at that! I’m here when you need me! Feel free to send text or audio messages to register your products!\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -80,
        580
      ],
      "id": "cbdb4aef-03cf-4b49-99c1-63ed89b3c288",
      "name": "Not Inventory Response Agent"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        460,
        400
      ],
      "id": "e731a38a-601f-47f5-b03c-08043f576f97",
      "name": "Response",
      "webhookId": "e9471d61-9ebb-4d12-bc49-9a17b2aaf0df",
      "credentials": {
        "telegramApi": {
          "id": "Sw0Z1auJMZBifYiI",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "ouyeurbVKyanYg7L",
          "mode": "list",
          "cachedResultName": "DB_Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "text": "={{ $json.message.content }}",
            "sessionId": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
            "organizationId": "={{ $('Find Telegram ID').first().json.organization_id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "text",
              "displayName": "text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "sessionId",
              "displayName": "sessionId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "organizationId",
              "displayName": "organizationId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number"
            }
          ],
          "attemptToConvertTypes": true,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        0,
        200
      ],
      "id": "307ba39e-45c0-4c17-aa9e-280c3648cb2c",
      "name": "DB Agent"
    },
    {
      "parameters": {
        "inputText": "={{ $json.message.content }}",
        "categories": {
          "categories": [
            {
              "category": "confirmation",
              "description": "The message confirms that inventory changes have already been applied."
            },
            {
              "category": "proposal",
              "description": "The message contains a proposed inventory change that requires confirmation. It lists modifications such as stock additions, removals, or new product registrations but does not indicate that the changes have already been executed."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        -400,
        80
      ],
      "id": "6662d58f-9801-4a0e-a8e4-11cb35963425",
      "name": "What Last Response Is About"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "chat_histories",
          "mode": "list",
          "cachedResultName": "chat_histories"
        },
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "session_id",
              "value": "={{ $('Telegram Trigger').first().json.message.chat.id.toString() }}"
            }
          ]
        },
        "sort": {
          "values": [
            {
              "column": "id",
              "direction": "DESC"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -940,
        400
      ],
      "id": "8d8da3a7-f867-4982-89ff-43e3f67b18b5",
      "name": "Select Last Message",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "inputText": "={{ $('Message').first().json.text }}",
        "categories": {
          "categories": [
            {
              "category": "confirmation",
              "description": "The message explicitly confirms a previously proposed inventory change without introducing new modifications. It does not request additional stock updates, product additions, or removals—only acknowledges and approves the suggested changes."
            },
            {
              "category": "about inventory",
              "description": "The message is related to inventory management, including stock updates, product additions or removals, quantity adjustments, price changes, or corrections to proposed changes. This includes subtle corrections (e.g., clarifying the size, name, or quantity of a product), even if not explicitly phrased as a command. It also includes any mention of asset acquisition. If the message refers to any changes to inventory—direct or indirect—it belongs here."
            },
            {
              "category": "not about inventory",
              "description": "The message is unrelated to inventory management. This includes rejections of proposals, messages that state no changes are wanted, or topics like customer service, technical support, or other general business matters."
            },
            {
              "category": "inventory inquiry",
              "description": "The message asks for information about the inventory without requesting changes. This includes checking if a product exists, how much of a product is in stock, filtering products by price or category, or asking about product data. This category applies only if the user is not suggesting or confirming any modification."
            }
          ]
        },
        "options": {
          "systemPromptTemplate": "=You are a message classifier for a product inventory assistant.  \nYour job is to classify the user's latest message into one of the following categories: {categories}.\n\nConsider both the current user message and the last assistant response to understand if the user is reacting to a proposal or asking for something new.\n\nImportant: Do NOT classify as “inventory inquiry” if the message is a **correction or clarification about a proposal**, even if phrased ambiguously or without clear verbs.\nOutput only the JSON.\n\nThe last assistant message was: {{ $json.message.content }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        -660,
        400
      ],
      "id": "768ed9e3-87ee-4516-987c-f84f4485b0d6",
      "name": "User Input",
      "executeOnce": true
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"output\": \"⚠️ Los cambios ya fueron aplicados.\\n\\n Tu confirmación ya fue procesada y el inventario se ha actualizado correctamente. ✅\\n\\n Si necesitas hacer nuevos cambios, envíame una nueva solicitud. 📦\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        0,
        0
      ],
      "id": "acc28faa-ffaa-4e2c-aab7-d92994f4c714",
      "name": "Changes Already Applied Response"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $fromAI(\"sql\") }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        80,
        1000
      ],
      "id": "98b19af3-e8d0-4923-8f77-dbb2cfdb6ba6",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Message').first().json.text }}",
        "options": {
          "systemMessage": "=Role:\nYou are Inventory Inquiry Agent, responsible for retrieving inventory information from a PostgreSQL database. You CANNOT modify, insert, delete, or update any data.\nTask:  \nNEVER modify inventory data. Only retrieve information.  \n\nExtract the user's request and generate a SQL query to fetch the required data.  \n\nDO NOT assume column names. First, run a query to retrieve the schema of the \"products\" table.  \n\nFormat the query result as plain text (no tables or JSON), always providing a friendly and descriptive response that clearly identifies what represents each piece of data (e.g., \"El producto [name] tiene [quantity] unidades disponibles\"), including only the information necessary to answer the user’s request correctly.  \n\nIf the specific product isn’t found, check for similar product names and suggest them as alternatives (e.g., \"No encontré [product], pero hay productos similares como [similar1] y [similar2].\").  \n\nALWAYS include the condition WHERE organization_id = {{ $('Find Telegram ID').first().json.organization_id }} in every query to filter results by the user's organization.\n\nTools:  \nPostgres → Executes SQL queries.  \nInput: \"sql\" (SQL query to fetch the required data).  \n\nOutput: Query results as plain text.\n\nExecution Flow:  \nRetrieve the schema of the \"products\" table to confirm the correct column names.  \n\nConstruct a SELECT query based on the user’s request, fetching only the columns needed to answer correctly, always adding WHERE organization_id = {{ $('Find Telegram ID').first().json.organization_id }} to filter by the user's organization.  \n\nExecute the query using Postgres:  \nIf the product is found, return the results as plain text, formatted in a friendly and descriptive way that explicitly identifies each value (e.g., \"El producto Laptop tiene 5 unidades disponibles\"), including only the requested data.  \n\nIf no exact match is found, run a secondary query to find products with similar names (e.g., using LIKE or ILIKE) and include them as alternatives in the response.\n\nSTRICT RULES:  \nDO NOT modify, insert, update, or delete any data.  \n\nDO NOT assume column names. Always retrieve them first.  \n\nONLY query the \"products\" table.  \n\nONLY generate SELECT queries.  \n\nALWAYS filter results by organization_id = {{ $('Find Telegram ID').first().json.organization_id }}. But don't output the organization's id or name, only the response for the user.  \n\nEnsure the response is always plain text, never a table or JSON, and is friendly and descriptive, clearly identifying what each piece of data represents, including only the information necessary to answer the user’s request.\n\nUse previous message if you need it to understand user's question: {{ $json.message.content }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -80,
        780
      ],
      "id": "560045a5-2bb9-4a01-8832-a84549852107",
      "name": "Inventory Inquiry Agent"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "user_telegram_chats",
          "mode": "list",
          "cachedResultName": "user_telegram_chats"
        },
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "telegram_chat_id",
              "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -3380,
        400
      ],
      "id": "e0edadd1-9230-4f13-b48b-b864ce6a5359",
      "name": "Find Telegram ID",
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "users",
          "mode": "list",
          "cachedResultName": "users"
        },
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "id",
              "value": "={{ $json.user_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -2800,
        400
      ],
      "id": "d058129e-4d0e-4f09-aa84-1ba25906993d",
      "name": "Find User ID",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.user_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "number",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "beb1e0d3-88ef-401a-9e26-49e700652f3c"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "finded"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d280f4e5-2fc1-4390-bcff-69907276aa79",
                    "leftValue": "={{ $json.user_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "number",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "not finded"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -3180,
        400
      ],
      "id": "3ad1dda6-6c8c-451c-abd6-b1e48843c133",
      "name": "Switch1"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "users",
          "mode": "list",
          "cachedResultName": "users"
        },
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "email",
              "value": "={{ $json.data.email }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -3680,
        600
      ],
      "id": "c3ecc233-49cc-4b9f-b241-bf457368ad6a",
      "name": "Find User By Email",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "number",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "beb1e0d3-88ef-401a-9e26-49e700652f3c"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "finded"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d280f4e5-2fc1-4390-bcff-69907276aa79",
                    "leftValue": "={{ $json.id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "number",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "not finded"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -3300,
        600
      ],
      "id": "04859b32-ac68-419d-a74e-b8c3bb5d24d0",
      "name": "Switch2"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "message": "¡Hola! Soy Nullius, tu asistente para gestionar inventario. No estás registrado aún, pero puedes empezar registrándote o iniciando sesión con tus credenciales aquí.",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "email",
              "fieldType": "email",
              "placeholder": "Email",
              "requiredField": true
            },
            {
              "fieldLabel": "password",
              "fieldType": "password",
              "placeholder": "Pasword",
              "requiredField": true
            }
          ]
        },
        "options": {
          "messageButtonLabel": "Clickea acá!"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -4020,
        600
      ],
      "id": "73eb4a48-ef02-4f24-9e55-952ce7567837",
      "name": "Obtain Credentials",
      "webhookId": "75816491-4b2b-4964-9aee-58a0754c553c",
      "credentials": {
        "telegramApi": {
          "id": "Sw0Z1auJMZBifYiI",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://keycloak.134.122.124.102.nip.io/admin/realms/nullius-realm/users",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"Content-Type\": \"application/json\",\n  \"Authorization\": \"Bearer {{ $json.access_token }}\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"email\": \"{{ $('Obtain Credentials').item.json.data.email }}\",\n  \"enabled\": true,\n  \"credentials\": [\n    {\n      \"type\": \"password\",\n      \"value\": \"{{ $('Obtain Credentials').item.json.data.password }}\",\n      \"temporary\": false\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3640,
        820
      ],
      "id": "f481ba0c-6ccb-4bcb-9a27-52743a63dad1",
      "name": "Create User In Keycloak"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "users",
          "mode": "list",
          "cachedResultName": "users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "email": "={{ $json.email }}",
            "password": "={{ $json.password }}",
            "password_iv": "={{ $json.iv }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "email",
              "displayName": "email",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "password",
              "displayName": "password",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "password_iv",
              "displayName": "password_iv",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -2880,
        820
      ],
      "id": "8faec5e5-b8e2-4ae7-b646-010549c6cb98",
      "name": "Create User",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "user_telegram_chats",
          "mode": "list",
          "cachedResultName": "user_telegram_chats"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "user_id": "={{ $json.id }}",
            "telegram_chat_id": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "telegram_chat_id",
              "displayName": "telegram_chat_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "organization_id",
              "displayName": "organization_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -2780,
        580
      ],
      "id": "b7ffec22-b2ba-4dba-a89f-4f7937c6ca6a",
      "name": "Save Chat As Allowed",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://keycloak.134.122.124.102.nip.io/realms/nullius-realm/protocol/openid-connect/token",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "client_credentials"
            },
            {
              "name": "client_id",
              "value": "={{ $('AdminClient').item.json.value }}"
            },
            {
              "name": "client_secret",
              "value": "={{ $('AdminSecret').item.json.value }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3860,
        820
      ],
      "id": "dc040c63-0771-4811-8c1f-1fffc0192c1d",
      "name": "Obtain Admin Credentials"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://keycloak.134.122.124.102.nip.io/realms/nullius-realm/protocol/openid-connect/token",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "password"
            },
            {
              "name": "client_id",
              "value": "={{ $('KeycloakClient').item.json.value }}"
            },
            {
              "name": "client_secret",
              "value": "={{ $('KeycloakSecret').item.json.value }}"
            },
            {
              "name": "username",
              "value": "={{ $('Decrypt Password').item.json.email }}"
            },
            {
              "name": "password",
              "value": "={{ $('Decrypt Password').item.json.password }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1500,
        400
      ],
      "id": "7183c65d-546c-4ea2-9c5f-833696d1647f",
      "name": "Login"
    },
    {
      "parameters": {
        "jsCode": "const crypto = require('crypto');\n\nconst key = $input.first().json.value;\nconst iv = crypto.randomBytes(16);\nconst cipher = crypto.createCipheriv('aes-256-cbc', key, iv);\n\nlet encrypted = cipher.update($('Obtain Credentials').first().json.data.password, 'utf8', 'hex');\nencrypted += cipher.final('hex');\n\nreturn {\n  email: $('Obtain Credentials').first().json.data.email,\n  password: encrypted,\n  iv: iv.toString('hex')\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3100,
        820
      ],
      "id": "01007e21-e2f4-487f-9557-9a59939d0536",
      "name": "Encrypt Password"
    },
    {
      "parameters": {
        "jsCode": "const crypto = require('crypto');\n\nconst key = $input.first().json.value;\nconst iv = Buffer.from($(\"Switch3\").first().json.password_iv, 'hex');\nconst decipher = crypto.createDecipheriv('aes-256-cbc', key, iv);\n\nlet decrypted = decipher.update($(\"Switch3\").first().json.password, 'hex', 'utf8');\ndecrypted += decipher.final('utf8');\n\nreturn { email: $(\"Switch3\").first().json.email, password: decrypted };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2120,
        400
      ],
      "id": "d8b84876-0914-4c56-aef5-f77804f45576",
      "name": "Decrypt Password"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "message": "No estás en una organización, ¡crea una aquí y empecemos!",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Organization Name",
              "placeholder": "Organization Name",
              "requiredField": true
            }
          ]
        },
        "options": {
          "messageButtonLabel": "Clickea acá!"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -2580,
        600
      ],
      "id": "0d7c855a-0661-4213-808e-ace7904b9eb7",
      "name": "Create Organization",
      "webhookId": "75816491-4b2b-4964-9aee-58a0754c553c",
      "credentials": {
        "telegramApi": {
          "id": "Sw0Z1auJMZBifYiI",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "organizations",
          "mode": "list",
          "cachedResultName": "organizations"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "name": "={{ $json.data[\"Organization Name\"] }}",
            "creator": "={{ $('Find User ID').item.json.id || $('Create User').item.json.id }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "name",
              "displayName": "name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "creator",
              "displayName": "creator",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -2200,
        600
      ],
      "id": "ffb0b36b-da95-4cb1-83ca-13f861b65bd8",
      "name": "Create Organization1",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "user_telegram_chats",
          "mode": "list",
          "cachedResultName": "user_telegram_chats"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "telegram_chat_id": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
            "organization_id": "={{ $json.id }}"
          },
          "matchingColumns": [
            "telegram_chat_id"
          ],
          "schema": [
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "telegram_chat_id",
              "displayName": "telegram_chat_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "organization_id",
              "displayName": "organization_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -2020,
        600
      ],
      "id": "9ddca972-fc9a-4a93-89dd-ca585f893c86",
      "name": "Update Active Chat Organization",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Find Telegram ID').item.json.organization_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "number",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "0e5f8208-52a3-4de6-a00a-98e6042d83bb"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Organization Finded"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1fbe41ce-4ad6-494f-8e50-bdf87146f612",
                    "leftValue": "={{ $('Find Telegram ID').item.json.organization_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "number",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Organization Not Finded"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2640,
        400
      ],
      "id": "a27fe09b-ad9d-4938-ae60-bf1af08b3d43",
      "name": "Switch3"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"output\": \"🔄 Processing your request...\\n\\n Please wait a moment while we handle your request. ⏳\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3860,
        600
      ],
      "id": "f51a90d9-ac15-4836-997c-da13ad302223",
      "name": "Loading1"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"output\": \"🔄 Processing your request...\\n\\n Please wait a moment while we handle your request. ⏳\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2400,
        600
      ],
      "id": "3cec45b1-9072-46f0-8561-13ac767a0c9f",
      "name": "Loading2"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "custom_variables",
          "mode": "list",
          "cachedResultName": "custom_variables"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -3980,
        400
      ],
      "id": "6ed34998-655c-4459-b2c1-8d3d289bf9b6",
      "name": "CustomVariables",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "custom_variables",
          "mode": "list",
          "cachedResultName": "custom_variables"
        },
        "where": {
          "values": [
            {
              "column": "key",
              "condition": "LIKE",
              "value": "keycloak_admin_client"
            }
          ]
        },
        "options": {
          "outputColumns": [
            "value"
          ]
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -4180,
        820
      ],
      "id": "7bf28025-3da9-430f-ad1e-46840cb82730",
      "name": "AdminClient",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "custom_variables",
          "mode": "list",
          "cachedResultName": "custom_variables"
        },
        "where": {
          "values": [
            {
              "column": "key",
              "value": "keycloak_admin_secret"
            }
          ]
        },
        "options": {
          "outputColumns": [
            "value"
          ]
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -4040,
        820
      ],
      "id": "7b31e588-ba45-4a5f-9b64-5fc1ffc82a4c",
      "name": "AdminSecret",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"output\": \"🔄 Processing your request...\\n\\n Please wait a moment while we handle your request. ⏳\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4180,
        400
      ],
      "id": "8fbf85fe-d087-4b04-be6f-a2c4fcd703cf",
      "name": "Loading"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "custom_variables",
          "mode": "list",
          "cachedResultName": "custom_variables"
        },
        "where": {
          "values": [
            {
              "column": "key",
              "value": "encrypt_key"
            }
          ]
        },
        "options": {
          "outputColumns": [
            "value"
          ]
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -3320,
        820
      ],
      "id": "bd376abd-1320-442f-9c40-85f4500dfd7e",
      "name": "EncryptKey",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "custom_variables",
          "mode": "list",
          "cachedResultName": "custom_variables"
        },
        "where": {
          "values": [
            {
              "column": "key",
              "value": "encrypt_key"
            }
          ]
        },
        "options": {
          "outputColumns": [
            "value"
          ]
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -2300,
        400
      ],
      "id": "5078f30f-d39d-4ddf-9f26-7ceba1d24c50",
      "name": "EncryptKey1",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "custom_variables",
          "mode": "list",
          "cachedResultName": "custom_variables"
        },
        "where": {
          "values": [
            {
              "column": "key",
              "value": "keycloak_client"
            }
          ]
        },
        "options": {
          "outputColumns": [
            "value"
          ]
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1920,
        400
      ],
      "id": "276b2d4c-240d-4713-9b32-6454995ccaac",
      "name": "KeycloakClient",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "custom_variables",
          "mode": "list",
          "cachedResultName": "custom_variables"
        },
        "where": {
          "values": [
            {
              "column": "key",
              "value": "keycloak_secret"
            }
          ]
        },
        "options": {
          "outputColumns": [
            "value"
          ]
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1700,
        400
      ],
      "id": "f3d5b293-fa01-4ad5-88aa-cee63513cfbf",
      "name": "KeycloakSecret",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "522942dc-d340-419b-8edd-b70e9b313442",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1260,
        240
      ],
      "id": "b3a29d00-6e91-4a3f-8c8c-cbec53b79549",
      "name": "VoiceTranscription"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "29b86268-38d4-42ab-84a7-05c62c05ba88",
              "name": "text",
              "value": "={{ $('Telegram Trigger').first().json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1260,
        60
      ],
      "id": "ea52432b-5fdb-4acc-b003-5141d12e0bdd",
      "name": "TextTranscription"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "92e4aea0-c46b-435b-ab4a-682f7cc14306",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1000,
        240
      ],
      "id": "d9829527-10a6-4ea8-ba4f-43ec2aae1962",
      "name": "Message"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
        "tableName": "chat_histories",
        "contextWindowLength": 1
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        280,
        680
      ],
      "id": "1722c206-5bf1-4419-ad58-8f522321d9a0",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "yRaFqQ1cs14EC4hJ",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Telegram Trigger').first().json.message.voice.file_id }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -1780,
        240
      ],
      "id": "972e8ceb-f3c8-4c7e-80dc-4c9a241da745",
      "name": "Telegram",
      "webhookId": "51e9eb0d-43cb-4ccb-95b8-aa19b7d6516e",
      "credentials": {
        "telegramApi": {
          "id": "Sw0Z1auJMZBifYiI",
          "name": "Telegram account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "CustomVariables",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loading",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "VoiceTranscription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "TextTranscription",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini-2.0": {
      "ai_languageModel": [
        [
          {
            "node": "What Last Response Is About",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Not Inventory Response Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "User Input",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Inventory Inquiry Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Inventory Planner Agent": {
      "main": [
        [
          {
            "node": "Parse Response Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Response Agent": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Not Inventory Response Agent": {
      "main": [
        [
          {
            "node": "Parse Response Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DB Agent": {
      "main": [
        [
          {
            "node": "Parse Response Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "What Last Response Is About": {
      "main": [
        [
          {
            "node": "Changes Already Applied Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "DB Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Last Message": {
      "main": [
        [
          {
            "node": "User Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Input": {
      "main": [
        [
          {
            "node": "What Last Response Is About",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Inventory Planner Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Not Inventory Response Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Inventory Inquiry Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Changes Already Applied Response": {
      "main": [
        [
          {
            "node": "Parse Response Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "ai_tool": [
        [
          {
            "node": "Inventory Inquiry Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Inventory Inquiry Agent": {
      "main": [
        [
          {
            "node": "Parse Response Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Telegram ID": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find User ID": {
      "main": [
        [
          {
            "node": "Switch3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Find User ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Obtain Credentials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find User By Email": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtain Credentials": {
      "main": [
        [
          {
            "node": "Loading1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Find User By Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Save Chat As Allowed",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AdminClient",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create User In Keycloak": {
      "main": [
        [
          {
            "node": "EncryptKey",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create User": {
      "main": [
        [
          {
            "node": "Save Chat As Allowed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtain Admin Credentials": {
      "main": [
        [
          {
            "node": "Create User In Keycloak",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Login": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Chat As Allowed": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Encrypt Password": {
      "main": [
        [
          {
            "node": "Create User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decrypt Password": {
      "main": [
        [
          {
            "node": "KeycloakClient",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Organization": {
      "main": [
        [
          {
            "node": "Create Organization1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loading2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Organization1": {
      "main": [
        [
          {
            "node": "Update Active Chat Organization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Active Chat Organization": {
      "main": [
        [
          {
            "node": "Find Telegram ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch3": {
      "main": [
        [
          {
            "node": "EncryptKey1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Organization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loading1": {
      "main": [
        [
          {
            "node": "Parse Response Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loading2": {
      "main": [
        [
          {
            "node": "Parse Response Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CustomVariables": {
      "main": [
        [
          {
            "node": "Find Telegram ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AdminClient": {
      "main": [
        [
          {
            "node": "AdminSecret",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AdminSecret": {
      "main": [
        [
          {
            "node": "Obtain Admin Credentials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loading": {
      "main": [
        [
          {
            "node": "Parse Response Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EncryptKey": {
      "main": [
        [
          {
            "node": "Encrypt Password",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EncryptKey1": {
      "main": [
        [
          {
            "node": "Decrypt Password",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "KeycloakClient": {
      "main": [
        [
          {
            "node": "KeycloakSecret",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "KeycloakSecret": {
      "main": [
        [
          {
            "node": "Login",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VoiceTranscription": {
      "main": [
        [
          {
            "node": "Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TextTranscription": {
      "main": [
        [
          {
            "node": "Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message": {
      "main": [
        [
          {
            "node": "Select Last Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Not Inventory Response Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Telegram": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1c21c8d2-d915-41be-8f78-89767b9ecca8",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "807311775c7585ed35e884f85091e51bb5aa58467a63a991e483dc935acd5061"
  },
  "id": "EzGW0Qt3OlJAs5qT",
  "tags": []
}